version: 2.1
parameters:
    run_basedeployment:
        default: true
        type: boolean
    run_smoketesting:
        default: false
        type: boolean
    run_performancetesting:
        default: false
        type: boolean

defaults: &defaults
    docker:
      - image: docker:20.10.21-git
        environment:
          ENV: $BASH_ENV

install_dependency: &install_dependency
          name: Installation of build and deployment dependencies.
          command: |
            apk update
            apk add --no-cache bash openssl curl
            apk upgrade
            apk add --no-cache jq py-pip sudo
            sudo pip install awscli --upgrade

install_deploysuite: &install_deploysuite
          name: Installation of install_deploysuite.
          command: |
            git clone --branch v1.4.14 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .
restore_cache_settings_for_build: &restore_cache_settings_for_build
  key: docker-node-modules-v3-{{ checksum "package-lock.json" }}

save_cache_settings: &save_cache_settings
  key: docker-node-modules-v3-{{ checksum "package-lock.json" }}
  paths:
    - node_modules

build_docker_image: &build_docker_image
          name: Build of Docker image
          command: |
            source buildenvvar
            ./build.sh
          no_output_timeout: 20m
jobs:
  # Build & Deploy against development backend
  "build-dev":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      # Build of Docker image.
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh DEV
            ./buildenv.sh -e DEV -b dev_communityapp_buildvar,dev_communityapp_deployvar -l dev_communityapp_buildvar_ps
      - run: *build_docker_image
      # Caching node modules.
      - save_cache: *save_cache_settings
      # Deployment.
      - deploy:
          name: Running MasterScript
          command: |
            source awsenvconf
            source buildenvvar
            ./master_deploy.sh -d ECS -e DEV -t latest -s dev_communityapp_taskvar -i communityapp

  # Build & Deploy against testing backend
  "build-test":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh DEV
            ./buildenv.sh -e DEV -b test_communityapp_buildvar,test_communityapp_deployvar -l dev_communityapp_buildvar_ps
      # Build of Docker image.
      - run: *build_docker_image
      # Caching node modules.
      - save_cache: *save_cache_settings
      # Deployment.
      - deploy:
          name: Running MasterScript
          command: |
            source awsenvconf
            source buildenvvar
            ./master_deploy.sh -d ECS -e DEV -t latest -s test_communityapp_taskvar -i communityapp

  # Build & Deploy against testing backend
  "build-qa":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh DEV
            ./buildenv.sh -e DEV -b qa_communityapp_buildvar,qa_communityapp_deployvar -l dev_communityapp_buildvar_ps
      # Build of Docker image.
      - run: *build_docker_image
      # Caching node modules.
      - save_cache: *save_cache_settings
      # Deployment.
      - deploy:
          name: Running MasterScript
          command: |
            source awsenvconf
            source buildenvvar
            ./master_deploy.sh -d ECS -e DEV -t latest -s qa_communityapp_taskvar -i communityapp

  # Build & Deploy against prod api backend
  "build-prod-beta":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh PROD
            ./buildenv.sh -e PROD -b beta_communityapp_buildvar,beta_communityapp_deployvar -l prod_communityapp_buildvar_ps
      # Build of Docker image.
      - run: *build_docker_image
      # Caching node modules.
      - save_cache: *save_cache_settings
      # Deployment.
      - deploy:
          name: Running MasterScript
          command: |
            source awsenvconf
            source buildenvvar
            ./master_deploy.sh -d ECS -e PROD -t latest -s beta_communityapp_taskvar, -i communityapp

  # Build & Deploy against prod api backend
  "build-prod-staging":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh PROD
            ./buildenv.sh -e PROD -b staging_communityapp_buildvar,staging_communityapp_deployvar -l prod_communityapp_buildvar_ps
      # Build of Docker image.
      - run: *build_docker_image
      # Caching node modules.
      - save_cache: *save_cache_settings
      # Deployment.
      - deploy:
          name: Running MasterScript
          command: |
            source awsenvconf
            source buildenvvar
            ./master_deploy.sh -d ECS -e PROD -t latest -s staging_communityapp_taskvar, -i communityapp     
            curl --request POST \
            --url https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline \
            --header "Circle-Token: ${CIRCLE_TOKEN}" \
            --header 'content-type: application/json' \
            --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"run_smoketesting":true , "run_performancetesting":false, "run_basedeployment": false}}'

  # Build & Deploy against production backend
  "build-prod":
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh PROD
            ./buildenv.sh -e PROD -b prod_communityapp_buildvar,prod_communityapp_deployvar -l prod_communityapp_buildvar_ps
      # Build of Docker image.
      - run: *build_docker_image
      # Caching node modules.
      - save_cache: *save_cache_settings
      # Deployment.
      - deploy:
          name: Running MasterScript
          command: |
            source awsenvconf
            source buildenvvar
            ./master_deploy.sh -d ECS -e PROD -t latest -s prod_communityapp_taskvar -i communityapp
            curl --request POST \
            --url https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline \
            --header "Circle-Token: ${CIRCLE_TOKEN}" \
            --header 'content-type: application/json' \
            --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"run_smoketesting":true , "run_performancetesting":false, "run_basedeployment": false}}'

  # Automated Smoke Testing against Staging
  Smoke-Testing-On-Staging:
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh PROD
            ./buildenv.sh -e PROD -b staging_communityapp_buildvar,staging_communityapp_deployvar
      - run:
          name: "Run automation"
          no_output_timeout: 20m
          command: |
            source awsenvconf
            source buildenvvar
            ./automated-smoke-test/smoketest.sh automation-config-staging.json prod
      - store_artifacts:
          path: ./automated-smoke-test/test-results

   # Automated Smoke Testing against Production
  Smoke-Testing-On-Production:
    <<: *defaults
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      # Restoration of node_modules from cache.
      - restore_cache: *restore_cache_settings_for_build
      - run:
          name: "configuring environment"
          command: |
            ./awsconfiguration.sh PROD
            ./buildenv.sh -e PROD -b prod_communityapp_buildvar,prod_communityapp_deployvar
      - run:
          name: "Run automation"
          no_output_timeout: 20m
          command: |
            source awsenvconf
            source buildenvvar
            ./automated-smoke-test/smoketest.sh automation-config-prod.json prod
      - store_artifacts:
          path: ./automated-smoke-test/test-results

  # Test job for the cases when we do not need deployment. It just rapidly
  # installs (updates) app dependencies, and runs tests (ESLint, Stylelint,
  # Jest unit-tests).
  test:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - restore_cache:
          key: test-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Config Git
          command: git config --global url."https://git@".insteadOf git://
      - run:
          name: App npm install
          command: npm install
          no_output_timeout: 20m
      - save_cache:
          key: test-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npm test

  Performance-Testing:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      - run: mvn verify

      - store_artifacts:
          path: target/jmeter/reports

workflows:
  version: 2
  Build:
    when: << pipeline.parameters.run_basedeployment >>
    jobs:
      # Development builds are executed on "new-develop" branch only.
      - "build-dev":
          context : org-global
          filters:
            branches:
              only:
                - free
      # This is alternate dev env for parallel testing
      - "build-test":
          context : org-global
          filters:
            branches:
              only:
                - free
      # This is alternate dev env for parallel testing
      - "build-qa":
          context : org-global
          filters:
            branches:
              only:
                - universal_nav
                - marathon_match_submission_download
                - feat/badges-box
      # This is beta env for production soft releases
      - "build-prod-beta":
          context : org-global
          filters:
            branches:
              only:
                - free
      # This is stage env for production QA releases
      - "build-prod-staging":
          context : org-global
          filters: &filters-staging
            branches:
              only:
                - develop
      # Production builds are exectuted
      # when PR is merged to the master
      # Don't change anything in this configuration
      # That might trigger wrong branch to be
      # deployed on the production
      # master branch.
      - "build-prod":
          context : org-global
          filters: &filters-prod
            branches:
              only:
                - master
      # Simple testing is executed for any branch other than "develop" and
      # "master".
      - test:
          filters:
            branches:
              ignore:
                - develop
                - submission_delete_button

  Smoke Testing:
    when: << pipeline.parameters.run_smoketesting >>
    jobs:
      - Hold [Smoke-Testing]:
          type: approval
      - Smoke-Testing-On-Staging:
          context : org-global
          requires:
            - Hold [Smoke-Testing]
          filters:
            <<: *filters-staging
      - Smoke-Testing-On-Production:
          context : org-global
          requires:
            - Hold [Smoke-Testing]
          filters:
            <<: *filters-prod

  Performance Testing:
    when: << pipeline.parameters.run_performancetesting >>
    jobs:
      - Hold [Performance-Testing]:
          type: approval
      - Performance-Testing:
          requires:
            - Hold [Performance-Testing]
          filters:
            branches:
              only:
                - master
                - develop
